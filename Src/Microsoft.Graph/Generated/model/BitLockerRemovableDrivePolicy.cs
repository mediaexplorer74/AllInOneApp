// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type BitLockerRemovableDrivePolicy.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<BitLockerRemovableDrivePolicy>))]
    public partial class BitLockerRemovableDrivePolicy
    {

        /// <summary>
        /// Gets or sets blockCrossOrganizationWriteAccess.
        /// This policy setting determines whether BitLocker protection is required for removable data drives to be writable on a computer.
        /// </summary>
        [JsonPropertyName("blockCrossOrganizationWriteAccess")]
        public bool? BlockCrossOrganizationWriteAccess { get; set; }
    
        /// <summary>
        /// Gets or sets encryptionMethod.
        /// Select the encryption method for removable  drives. Possible values are: aesCbc128, aesCbc256, xtsAes128, xtsAes256.
        /// </summary>
        [JsonPropertyName("encryptionMethod")]
        public BitLockerEncryptionMethod? EncryptionMethod { get; set; }
    
        /// <summary>
        /// Gets or sets requireEncryptionForWriteAccess.
        /// Indicates whether to block write access to devices configured in another organization.  If requireEncryptionForWriteAccess is false, this value does not affect.
        /// </summary>
        [JsonPropertyName("requireEncryptionForWriteAccess")]
        public bool? RequireEncryptionForWriteAccess { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
