// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type MalwareState.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<MalwareState>))]
    public partial class MalwareState
    {

        /// <summary>
        /// Gets or sets category.
        /// Provider-generated malware category (for example, trojan, ransomware, etc.).
        /// </summary>
        [JsonPropertyName("category")]
        public string Category { get; set; }
    
        /// <summary>
        /// Gets or sets family.
        /// Provider-generated malware family (for example, 'wannacry', 'notpetya', etc.).
        /// </summary>
        [JsonPropertyName("family")]
        public string Family { get; set; }
    
        /// <summary>
        /// Gets or sets name.
        /// Provider-generated malware variant name (for example, Trojan:Win32/Powessere.H).
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }
    
        /// <summary>
        /// Gets or sets severity.
        /// Provider-determined severity of this malware.
        /// </summary>
        [JsonPropertyName("severity")]
        public string Severity { get; set; }
    
        /// <summary>
        /// Gets or sets wasRunning.
        /// Indicates whether the detected file (malware/vulnerability) was running at the time of detection or was detected at rest on the disk.
        /// </summary>
        [JsonPropertyName("wasRunning")]
        public bool? WasRunning { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
